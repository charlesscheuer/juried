{"ast":null,"code":"'use strict';\n\nconst crypto = require('crypto');\n\nconst utils = require('./utils');\n\nconst Error = require('./Error');\n\nconst Webhook = {\n  DEFAULT_TOLERANCE: 300,\n\n  // 5 minutes\n  constructEvent(payload, header, secret, tolerance) {\n    this.signature.verifyHeader(payload, header, secret, tolerance || Webhook.DEFAULT_TOLERANCE);\n    const jsonPayload = JSON.parse(payload);\n    return jsonPayload;\n  },\n\n  /**\n   * Generates a header to be used for webhook mocking\n   *\n   * @typedef {object} opts\n   * @property {number} timestamp - Timestamp of the header. Defaults to Date.now()\n   * @property {string} payload - JSON stringified payload object, containing the 'id' and 'object' parameters\n   * @property {string} secret - Stripe webhook secret 'whsec_...'\n   * @property {string} scheme - Version of API to hit. Defaults to 'v1'.\n   * @property {string} signature - Computed webhook signature\n   */\n  generateTestHeaderString: function (opts) {\n    if (!opts) {\n      throw new Error.StripeError({\n        message: 'Options are required'\n      });\n    }\n\n    opts.timestamp = Math.floor(opts.timestamp) || Math.floor(Date.now() / 1000);\n    opts.scheme = opts.scheme || signature.EXPECTED_SCHEME;\n    opts.signature = opts.signature || signature._computeSignature(opts.timestamp + '.' + opts.payload, opts.secret);\n    var generatedHeader = ['t=' + opts.timestamp, opts.scheme + '=' + opts.signature].join(',');\n    return generatedHeader;\n  }\n};\nconst signature = {\n  EXPECTED_SCHEME: 'v1',\n  _computeSignature: (payload, secret) => {\n    return crypto.createHmac('sha256', secret).update(payload, 'utf8').digest('hex');\n  },\n\n  verifyHeader(payload, header, secret, tolerance) {\n    payload = Buffer.isBuffer(payload) ? payload.toString('utf8') : payload;\n    header = Buffer.isBuffer(header) ? header.toString('utf8') : header;\n    const details = parseHeader(header, this.EXPECTED_SCHEME);\n\n    if (!details || details.timestamp === -1) {\n      throw new Error.StripeSignatureVerificationError({\n        message: 'Unable to extract timestamp and signatures from header',\n        detail: {\n          header,\n          payload\n        }\n      });\n    }\n\n    if (!details.signatures.length) {\n      throw new Error.StripeSignatureVerificationError({\n        message: 'No signatures found with expected scheme',\n        detail: {\n          header,\n          payload\n        }\n      });\n    }\n\n    const expectedSignature = this._computeSignature(\"\".concat(details.timestamp, \".\").concat(payload), secret);\n\n    const signatureFound = !!details.signatures.filter(utils.secureCompare.bind(utils, expectedSignature)).length;\n\n    if (!signatureFound) {\n      throw new Error.StripeSignatureVerificationError({\n        message: 'No signatures found matching the expected signature for payload.' + ' Are you passing the raw request body you received from Stripe?' + ' https://github.com/stripe/stripe-node#webhook-signing',\n        detail: {\n          header,\n          payload\n        }\n      });\n    }\n\n    const timestampAge = Math.floor(Date.now() / 1000) - details.timestamp;\n\n    if (tolerance > 0 && timestampAge > tolerance) {\n      throw new Error.StripeSignatureVerificationError({\n        message: 'Timestamp outside the tolerance zone',\n        detail: {\n          header,\n          payload\n        }\n      });\n    }\n\n    return true;\n  }\n\n};\n\nfunction parseHeader(header, scheme) {\n  if (typeof header !== 'string') {\n    return null;\n  }\n\n  return header.split(',').reduce((accum, item) => {\n    const kv = item.split('=');\n\n    if (kv[0] === 't') {\n      accum.timestamp = kv[1];\n    }\n\n    if (kv[0] === scheme) {\n      accum.signatures.push(kv[1]);\n    }\n\n    return accum;\n  }, {\n    timestamp: -1,\n    signatures: []\n  });\n}\n\nWebhook.signature = signature;\nmodule.exports = Webhook;","map":null,"metadata":{},"sourceType":"script"}