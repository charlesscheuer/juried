{"ast":null,"code":"'use strict';\n\nconst utils = require('./utils');\n/**\n * StripeError is the base error from which all other more specific Stripe errors derive.\n * Specifically for errors returned from Stripe's REST API.\n */\n\n\nclass StripeError extends Error {\n  constructor(raw = {}) {\n    super(raw.message); // This splat is here for back-compat and should be removed in the next major version.\n\n    this.populate(...arguments);\n    this.type = this.constructor.name;\n  }\n  /**\n   * DEPRECATED\n   * This will be inlined in the constructor in the future.\n   */\n\n\n  populate(raw) {\n    this.raw = raw;\n\n    if (!raw || typeof raw !== 'object') {\n      return;\n    }\n\n    this.rawType = raw.type;\n    this.code = raw.code;\n    this.param = raw.param;\n    this.detail = raw.detail;\n    this.headers = raw.headers;\n    this.requestId = raw.requestId;\n    this.statusCode = raw.statusCode;\n    this.message = raw.message;\n    this.charge = raw.charge;\n    this.decline_code = raw.decline_code;\n    this.payment_intent = raw.payment_intent;\n    this.payment_method = raw.payment_method;\n    this.setup_intent = raw.setup_intent;\n    this.source = raw.source;\n  }\n  /**\n   * Helper factory which takes raw stripe errors and outputs wrapping instances\n   */\n\n\n  static generate(rawStripeError) {\n    switch (rawStripeError.type) {\n      case 'card_error':\n        return new StripeCardError(rawStripeError);\n\n      case 'invalid_request_error':\n        return new StripeInvalidRequestError(rawStripeError);\n\n      case 'api_error':\n        return new StripeAPIError(rawStripeError);\n\n      case 'idempotency_error':\n        return new StripeIdempotencyError(rawStripeError);\n\n      case 'invalid_grant':\n        return new StripeInvalidGrantError(rawStripeError);\n\n      default:\n        return new GenericError('Generic', 'Unknown Error');\n    }\n  }\n  /**\n   * DEPRECATED\n   * Please use class inheritance instead.\n   */\n\n\n  static extend(options) {\n    const type = options.type;\n\n    class CustomError extends StripeError {}\n\n    Object.defineProperty(CustomError, 'name', {\n      value: type\n    });\n    delete options.type;\n    Object.assign(CustomError.prototype, options);\n    return CustomError;\n  }\n\n} // Specific Stripe Error types:\n\n/**\n * CardError is raised when a user enters a card that can't be charged for\n * some reason.\n */\n\n\nclass StripeCardError extends StripeError {}\n/**\n * InvalidRequestError is raised when a request is initiated with invalid\n * parameters.\n */\n\n\nclass StripeInvalidRequestError extends StripeError {}\n/**\n * APIError is a generic error that may be raised in cases where none of the\n * other named errors cover the problem. It could also be raised in the case\n * that a new error has been introduced in the API, but this version of the\n * Node.JS SDK doesn't know how to handle it.\n */\n\n\nclass StripeAPIError extends StripeError {}\n/**\n * AuthenticationError is raised when invalid credentials are used to connect\n * to Stripe's servers.\n */\n\n\nclass StripeAuthenticationError extends StripeError {}\n/**\n * PermissionError is raised in cases where access was attempted on a resource\n * that wasn't allowed.\n */\n\n\nclass StripePermissionError extends StripeError {}\n/**\n * RateLimitError is raised in cases where an account is putting too much load\n * on Stripe's API servers (usually by performing too many requests). Please\n * back off on request rate.\n */\n\n\nclass StripeRateLimitError extends StripeError {}\n/**\n * StripeConnectionError is raised in the event that the SDK can't connect to\n * Stripe's servers. That can be for a variety of different reasons from a\n * downed network to a bad TLS certificate.\n */\n\n\nclass StripeConnectionError extends StripeError {}\n/**\n * SignatureVerificationError is raised when the signature verification for a\n * webhook fails\n */\n\n\nclass StripeSignatureVerificationError extends StripeError {}\n/**\n * IdempotencyError is raised in cases where an idempotency key was used\n * improperly.\n */\n\n\nclass StripeIdempotencyError extends StripeError {}\n/**\n * InvalidGrantError is raised when a specified code doesn't exist, is\n * expired, has been used, or doesn't belong to you; a refresh token doesn't\n * exist, or doesn't belong to you; or if an API key's mode (live or test)\n * doesn't match the mode of a code or refresh token.\n */\n\n\nclass StripeInvalidGrantError extends StripeError {}\n/**\n * DEPRECATED\n * This is here for backwards compatibility and will be removed in the next major version.\n */\n\n\nfunction _Error(raw) {\n  this.populate(...arguments);\n  this.stack = new Error(this.message).stack;\n}\n\n_Error.prototype = Object.create(Error.prototype);\n_Error.prototype.type = 'GenericError';\n\n_Error.prototype.populate = function (type, message) {\n  this.type = type;\n  this.message = message;\n};\n\n_Error.extend = utils.protoExtend;\n/**\n * DEPRECATED.\n * Do not use the default export; it may be removed or change in a future version.\n */\n\nmodule.exports = _Error;\nmodule.exports.StripeError = StripeError;\nmodule.exports.StripeCardError = StripeCardError;\nmodule.exports.StripeInvalidRequestError = StripeInvalidRequestError;\nmodule.exports.StripeAPIError = StripeAPIError;\nmodule.exports.StripeAuthenticationError = StripeAuthenticationError;\nmodule.exports.StripePermissionError = StripePermissionError;\nmodule.exports.StripeRateLimitError = StripeRateLimitError;\nmodule.exports.StripeConnectionError = StripeConnectionError;\nmodule.exports.StripeSignatureVerificationError = StripeSignatureVerificationError;\nmodule.exports.StripeIdempotencyError = StripeIdempotencyError;\nmodule.exports.StripeInvalidGrantError = StripeInvalidGrantError;","map":null,"metadata":{},"sourceType":"script"}