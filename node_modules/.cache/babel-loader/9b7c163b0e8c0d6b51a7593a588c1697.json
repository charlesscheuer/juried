{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst exec = require('child_process').exec;\n\nconst qs = require('qs');\n\nconst crypto = require('crypto');\n\nconst hasOwn = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\n/**\n * TODO: Remove snake case keys in a future major release\n */\n\n\nconst OPTIONS_KEYS = ['api_key', 'apiKey', 'idempotency_key', 'idempotencyKey', 'stripe_account', 'stripeAccount', 'stripe_version', 'stripeVersion', 'maxNetworkRetries', 'timeout'];\nconst utils = module.exports = {\n  isOptionsHash(o) {\n    return o && typeof o === 'object' && OPTIONS_KEYS.some(prop => hasOwn(o, prop));\n  },\n\n  /**\n   * Stringifies an Object, accommodating nested objects\n   * (forming the conventional key 'parent[child]=value')\n   */\n  stringifyRequestData: data => {\n    return qs.stringify(data, {\n      serializeDate: d => Math.floor(d.getTime() / 1000)\n    }) // Don't use strict form encoding by changing the square bracket control\n    // characters back to their literals. This is fine by the server, and\n    // makes these parameter strings easier to read.\n    .replace(/%5B/g, '[').replace(/%5D/g, ']');\n  },\n\n  /**\n   * Outputs a new function with interpolated object property values.\n   * Use like so:\n   *   var fn = makeURLInterpolator('some/url/{param1}/{param2}');\n   *   fn({ param1: 123, param2: 456 }); // => 'some/url/123/456'\n   */\n  makeURLInterpolator: (() => {\n    const rc = {\n      '\\n': '\\\\n',\n      '\"': '\\\\\"',\n      '\\u2028': '\\\\u2028',\n      '\\u2029': '\\\\u2029'\n    };\n    return str => {\n      const cleanString = str.replace(/[\"\\n\\r\\u2028\\u2029]/g, $0 => rc[$0]);\n      return outputs => {\n        return cleanString.replace(/\\{([\\s\\S]+?)\\}/g, ($0, $1) => encodeURIComponent(outputs[$1] || ''));\n      };\n    };\n  })(),\n  extractUrlParams: path => {\n    const params = path.match(/\\{\\w+\\}/g);\n\n    if (!params) {\n      return [];\n    }\n\n    return params.map(param => param.replace(/[{}]/g, ''));\n  },\n\n  /**\n   * Return the data argument from a list of arguments\n   *\n   * @param {object[]} args\n   * @returns {object}\n   */\n  getDataFromArgs(args) {\n    if (!Array.isArray(args) || !args[0] || typeof args[0] !== 'object') {\n      return {};\n    }\n\n    if (!utils.isOptionsHash(args[0])) {\n      return args.shift();\n    }\n\n    const argKeys = Object.keys(args[0]);\n    const optionKeysInArgs = argKeys.filter(key => OPTIONS_KEYS.includes(key)); // In some cases options may be the provided as the first argument.\n    // Here we're detecting a case where there are two distinct arguments\n    // (the first being args and the second options) and with known\n    // option keys in the first so that we can warn the user about it.\n\n    if (optionKeysInArgs.length > 0 && optionKeysInArgs.length !== argKeys.length) {\n      emitWarning(\"Options found in arguments (\".concat(optionKeysInArgs.join(', '), \"). Did you mean to pass an options object? See https://github.com/stripe/stripe-node/wiki/Passing-Options.\"));\n    }\n\n    return {};\n  },\n\n  /**\n   * Return the options hash from a list of arguments\n   */\n  getOptionsFromArgs: args => {\n    const opts = {\n      auth: null,\n      headers: {},\n      settings: {}\n    };\n\n    if (args.length > 0) {\n      const arg = args[args.length - 1];\n\n      if (typeof arg === 'string') {\n        opts.auth = args.pop();\n      } else if (utils.isOptionsHash(arg)) {\n        const params = args.pop();\n        const extraKeys = Object.keys(params).filter(key => !OPTIONS_KEYS.includes(key));\n\n        if (extraKeys.length) {\n          emitWarning(\"Invalid options found (\".concat(extraKeys.join(', '), \"); ignoring.\"));\n        }\n        /**\n         * TODO: Remove snake case params in next major version\n         */\n\n\n        if (params.apiKey || params.api_key) {\n          opts.auth = params.apiKey || params.api_key;\n        }\n\n        if (params.idempotencyKey || params.idempotency_key) {\n          opts.headers['Idempotency-Key'] = params.idempotencyKey || params.idempotency_key;\n        }\n\n        if (params.stripeAccount || params.stripe_account) {\n          opts.headers['Stripe-Account'] = params.stripeAccount || params.stripe_account;\n        }\n\n        if (params.stripeVersion || params.stripe_version) {\n          opts.headers['Stripe-Version'] = params.stripeVersion || params.stripe_version;\n        }\n\n        if (Number.isInteger(params.maxNetworkRetries)) {\n          opts.settings.maxNetworkRetries = params.maxNetworkRetries;\n        }\n\n        if (Number.isInteger(params.timeout)) {\n          opts.settings.timeout = params.timeout;\n        }\n      }\n    }\n\n    return opts;\n  },\n\n  /**\n   * Provide simple \"Class\" extension mechanism\n   */\n  protoExtend(sub) {\n    const Super = this;\n    const Constructor = hasOwn(sub, 'constructor') ? sub.constructor : function (...args) {\n      Super.apply(this, args);\n    }; // This initialization logic is somewhat sensitive to be compatible with\n    // divergent JS implementations like the one found in Qt. See here for more\n    // context:\n    //\n    // https://github.com/stripe/stripe-node/pull/334\n\n    Object.assign(Constructor, Super);\n    Constructor.prototype = Object.create(Super.prototype);\n    Object.assign(Constructor.prototype, sub);\n    return Constructor;\n  },\n\n  /**\n   * Secure compare, from https://github.com/freewil/scmp\n   */\n  secureCompare: (a, b) => {\n    a = Buffer.from(a);\n    b = Buffer.from(b); // return early here if buffer lengths are not equal since timingSafeEqual\n    // will throw if buffer lengths are not equal\n\n    if (a.length !== b.length) {\n      return false;\n    } // use crypto.timingSafeEqual if available (since Node.js v6.6.0),\n    // otherwise use our own scmp-internal function.\n\n\n    if (crypto.timingSafeEqual) {\n      return crypto.timingSafeEqual(a, b);\n    }\n\n    const len = a.length;\n    let result = 0;\n\n    for (let i = 0; i < len; ++i) {\n      result |= a[i] ^ b[i];\n    }\n\n    return result === 0;\n  },\n\n  /**\n   * Remove empty values from an object\n   */\n  removeNullish: obj => {\n    if (typeof obj !== 'object') {\n      throw new Error('Argument must be an object');\n    }\n\n    return Object.keys(obj).reduce((result, key) => {\n      if (obj[key] != null) {\n        result[key] = obj[key];\n      }\n\n      return result;\n    }, {});\n  },\n\n  /**\n   * Normalize standard HTTP Headers:\n   * {'foo-bar': 'hi'}\n   * becomes\n   * {'Foo-Bar': 'hi'}\n   */\n  normalizeHeaders: obj => {\n    if (!(obj && typeof obj === 'object')) {\n      return obj;\n    }\n\n    return Object.keys(obj).reduce((result, header) => {\n      result[utils.normalizeHeader(header)] = obj[header];\n      return result;\n    }, {});\n  },\n\n  /**\n   * Stolen from https://github.com/marten-de-vries/header-case-normalizer/blob/master/index.js#L36-L41\n   * without the exceptions which are irrelevant to us.\n   */\n  normalizeHeader: header => {\n    return header.split('-').map(text => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase()).join('-');\n  },\n\n  /**\n   * Determine if file data is a derivative of EventEmitter class.\n   * https://nodejs.org/api/events.html#events_events\n   */\n  checkForStream: obj => {\n    if (obj.file && obj.file.data) {\n      return obj.file.data instanceof EventEmitter;\n    }\n\n    return false;\n  },\n  callbackifyPromiseWithTimeout: (promise, callback) => {\n    if (callback) {\n      // Ensure callback is called outside of promise stack.\n      return promise.then(res => {\n        setTimeout(() => {\n          callback(null, res);\n        }, 0);\n      }, err => {\n        setTimeout(() => {\n          callback(err, null);\n        }, 0);\n      });\n    }\n\n    return promise;\n  },\n\n  /**\n   * Allow for special capitalization cases (such as OAuth)\n   */\n  pascalToCamelCase: name => {\n    if (name === 'OAuth') {\n      return 'oauth';\n    } else {\n      return name[0].toLowerCase() + name.substring(1);\n    }\n  },\n  emitWarning,\n\n  /**\n   * Node's built in `exec` function sometimes throws outright,\n   * and sometimes has a callback with an error,\n   * depending on the type of error.\n   *\n   * This unifies that interface.\n   */\n  safeExec: (cmd, cb) => {\n    try {\n      utils._exec(cmd, cb);\n    } catch (e) {\n      cb(e, null);\n    }\n  },\n  // For mocking in tests.\n  _exec: exec,\n  isObject: obj => {\n    const type = typeof obj;\n    return (type === 'function' || type === 'object') && !!obj;\n  },\n  // For use in multipart requests\n  flattenAndStringify: data => {\n    const result = {};\n\n    const step = (obj, prevKey) => {\n      Object.keys(obj).forEach(key => {\n        const value = obj[key];\n        const newKey = prevKey ? \"\".concat(prevKey, \"[\").concat(key, \"]\") : key;\n\n        if (utils.isObject(value)) {\n          if (!Buffer.isBuffer(value) && !value.hasOwnProperty('data')) {\n            // Non-buffer non-file Objects are recursively flattened\n            return step(value, newKey);\n          } else {\n            // Buffers and file objects are stored without modification\n            result[newKey] = value;\n          }\n        } else {\n          // Primitives are converted to strings\n          result[newKey] = String(value);\n        }\n      });\n    };\n\n    step(data);\n    return result;\n  },\n\n  /**\n   * https://stackoverflow.com/a/2117523\n   */\n  uuid4: () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n      const r = Math.random() * 16 | 0;\n      const v = c === 'x' ? r : r & 0x3 | 0x8;\n      return v.toString(16);\n    });\n  },\n  validateInteger: (name, n, defaultVal) => {\n    if (!Number.isInteger(n)) {\n      if (defaultVal !== undefined) {\n        return defaultVal;\n      } else {\n        throw new Error(\"\".concat(name, \" must be an integer\"));\n      }\n    }\n\n    return n;\n  }\n};\n\nfunction emitWarning(warning) {\n  if (typeof process.emitWarning !== 'function') {\n    return console.warn(\"Stripe: \".concat(warning));\n    /* eslint-disable-line no-console */\n  }\n\n  return process.emitWarning(warning, 'Stripe');\n}","map":null,"metadata":{},"sourceType":"script"}