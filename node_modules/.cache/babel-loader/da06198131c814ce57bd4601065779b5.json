{"ast":null,"code":"'use strict';\n\nconst makeRequest = require('./makeRequest');\n\nconst utils = require('./utils');\n\nfunction makeAutoPaginationMethods(self, requestArgs, spec, firstPagePromise) {\n  const promiseCache = {\n    currentPromise: null\n  };\n  let listPromise = firstPagePromise;\n  let i = 0;\n\n  function iterate(listResult) {\n    if (!(listResult && listResult.data && typeof listResult.data.length === 'number')) {\n      throw Error('Unexpected: Stripe API response does not have a well-formed `data` array.');\n    }\n\n    if (i < listResult.data.length) {\n      const value = listResult.data[i];\n      i += 1;\n      return {\n        value,\n        done: false\n      };\n    } else if (listResult.has_more) {\n      // Reset counter, request next page, and recurse.\n      i = 0;\n      const lastId = getLastId(listResult);\n      listPromise = makeRequest(self, requestArgs, spec, {\n        starting_after: lastId\n      });\n      return listPromise.then(iterate);\n    }\n\n    return {\n      value: undefined,\n      done: true\n    };\n  }\n\n  function asyncIteratorNext() {\n    return memoizedPromise(promiseCache, (resolve, reject) => {\n      return listPromise.then(iterate).then(resolve).catch(reject);\n    });\n  }\n\n  const autoPagingEach = makeAutoPagingEach(asyncIteratorNext);\n  const autoPagingToArray = makeAutoPagingToArray(autoPagingEach);\n  const autoPaginationMethods = {\n    autoPagingEach,\n    autoPagingToArray,\n    // Async iterator functions:\n    next: asyncIteratorNext,\n    return: () => {\n      // This is required for `break`.\n      return {};\n    },\n    [getAsyncIteratorSymbol()]: () => {\n      return autoPaginationMethods;\n    }\n  };\n  return autoPaginationMethods;\n}\n\nmodule.exports.makeAutoPaginationMethods = makeAutoPaginationMethods;\n/**\n * ----------------\n * Private Helpers:\n * ----------------\n */\n\nfunction getAsyncIteratorSymbol() {\n  if (typeof Symbol !== 'undefined' && Symbol.asyncIterator) {\n    return Symbol.asyncIterator;\n  } // Follow the convention from libraries like iterall: https://github.com/leebyron/iterall#asynciterator-1\n\n\n  return '@@asyncIterator';\n}\n\nfunction getDoneCallback(args) {\n  if (args.length < 2) {\n    return undefined;\n  }\n\n  const onDone = args[1];\n\n  if (typeof onDone !== 'function') {\n    throw Error(\"The second argument to autoPagingEach, if present, must be a callback function; receieved \".concat(typeof onDone));\n  }\n\n  return onDone;\n}\n/**\n * We allow four forms of the `onItem` callback (the middle two being equivalent),\n *\n *   1. `.autoPagingEach((item) => { doSomething(item); return false; });`\n *   2. `.autoPagingEach(async (item) => { await doSomething(item); return false; });`\n *   3. `.autoPagingEach((item) => doSomething(item).then(() => false));`\n *   4. `.autoPagingEach((item, next) => { doSomething(item); next(false); });`\n *\n * In addition to standard validation, this helper\n * coalesces the former forms into the latter form.\n */\n\n\nfunction getItemCallback(args) {\n  if (args.length === 0) {\n    return undefined;\n  }\n\n  const onItem = args[0];\n\n  if (typeof onItem !== 'function') {\n    throw Error(\"The first argument to autoPagingEach, if present, must be a callback function; receieved \".concat(typeof onItem));\n  } // 4. `.autoPagingEach((item, next) => { doSomething(item); next(false); });`\n\n\n  if (onItem.length === 2) {\n    return onItem;\n  }\n\n  if (onItem.length > 2) {\n    throw Error(\"The `onItem` callback function passed to autoPagingEach must accept at most two arguments; got \".concat(onItem));\n  } // This magically handles all three of these usecases (the latter two being functionally identical):\n  // 1. `.autoPagingEach((item) => { doSomething(item); return false; });`\n  // 2. `.autoPagingEach(async (item) => { await doSomething(item); return false; });`\n  // 3. `.autoPagingEach((item) => doSomething(item).then(() => false));`\n\n\n  return function _onItem(item, next) {\n    const shouldContinue = onItem(item);\n    next(shouldContinue);\n  };\n}\n\nfunction getLastId(listResult) {\n  const lastIdx = listResult.data.length - 1;\n  const lastItem = listResult.data[lastIdx];\n  const lastId = lastItem && lastItem.id;\n\n  if (!lastId) {\n    throw Error('Unexpected: No `id` found on the last item while auto-paging a list.');\n  }\n\n  return lastId;\n}\n/**\n * If a user calls `.next()` multiple times in parallel,\n * return the same result until something has resolved\n * to prevent page-turning race conditions.\n */\n\n\nfunction memoizedPromise(promiseCache, cb) {\n  if (promiseCache.currentPromise) {\n    return promiseCache.currentPromise;\n  }\n\n  promiseCache.currentPromise = new Promise(cb).then(ret => {\n    promiseCache.currentPromise = undefined;\n    return ret;\n  });\n  return promiseCache.currentPromise;\n}\n\nfunction makeAutoPagingEach(asyncIteratorNext) {\n  return function autoPagingEach()\n  /* onItem?, onDone? */\n  {\n    const args = [].slice.call(arguments);\n    const onItem = getItemCallback(args);\n    const onDone = getDoneCallback(args);\n\n    if (args.length > 2) {\n      throw Error('autoPagingEach takes up to two arguments; received:', args);\n    }\n\n    const autoPagePromise = wrapAsyncIteratorWithCallback(asyncIteratorNext, onItem);\n    return utils.callbackifyPromiseWithTimeout(autoPagePromise, onDone);\n  };\n}\n\nfunction makeAutoPagingToArray(autoPagingEach) {\n  return function autoPagingToArray(opts, onDone) {\n    const limit = opts && opts.limit;\n\n    if (!limit) {\n      throw Error('You must pass a `limit` option to autoPagingToArray, eg; `autoPagingToArray({limit: 1000});`.');\n    }\n\n    if (limit > 10000) {\n      throw Error('You cannot specify a limit of more than 10,000 items to fetch in `autoPagingToArray`; use `autoPagingEach` to iterate through longer lists.');\n    }\n\n    const promise = new Promise((resolve, reject) => {\n      const items = [];\n      autoPagingEach(item => {\n        items.push(item);\n\n        if (items.length >= limit) {\n          return false;\n        }\n      }).then(() => {\n        resolve(items);\n      }).catch(reject);\n    });\n    return utils.callbackifyPromiseWithTimeout(promise, onDone);\n  };\n}\n\nfunction wrapAsyncIteratorWithCallback(asyncIteratorNext, onItem) {\n  return new Promise((resolve, reject) => {\n    function handleIteration(iterResult) {\n      if (iterResult.done) {\n        resolve();\n        return;\n      }\n\n      const item = iterResult.value;\n      return new Promise(next => {\n        // Bit confusing, perhaps; we pass a `resolve` fn\n        // to the user, so they can decide when and if to continue.\n        // They can return false, or a promise which resolves to false, to break.\n        onItem(item, next);\n      }).then(shouldContinue => {\n        if (shouldContinue === false) {\n          return handleIteration({\n            done: true\n          });\n        } else {\n          return asyncIteratorNext().then(handleIteration);\n        }\n      });\n    }\n\n    asyncIteratorNext().then(handleIteration).catch(reject);\n  });\n}","map":null,"metadata":{},"sourceType":"script"}